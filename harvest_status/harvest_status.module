<?php
// $Id$

/**
 * @file
 * Gives a snapshot of what everyone is working on.
 */

/**
 * Implements hook_init().
 */
function harvest_status_init() {
  drupal_add_css(drupal_get_path('module', 'harvest_status') . '/harvest_status.css');
}

/**
 * Implements hook_menu().
 */
function harvest_status_menu() {
  // administration page
  $items['admin/config/services/harvest/status'] = array(
    'title' => 'Harvest Status settings',
    'description' => 'Select users to be included in the Harvest Status block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('harvest_status_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings form
 */
function harvest_status_admin() {
  $form = array();

  $form['harvest_status_users'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Users to include'),
    '#default_value' => variable_get('harvest_status_users', array()),
    '#options' => _harvest_status_user_list(),
    '#description' => t("Select all user you would like included in the Harvest Status block."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function _harvest_status_user_list() {
  $result = db_select('users', 'u')
    ->fields('u', array('uid', 'name'))
    ->condition('uid', 0, '<>')
    ->orderBy('name')
    ->execute();

  foreach ($result as $obj) {
    $items[$obj->uid] = $obj->name;
  }
  return $items;
}

/**
 * Implements hook_user_profile_form_alter().
 */
function harvest_status_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      // add option to user form to set password for harvest account
      if (user_access('assign harvest account to user')) {
        $form['harvest_projects']['harvest_account_login'] = array(
          '#type' => 'password',
          '#title' => t('Password'),
          '#description' => t('Enter the password for your harvest account.'),
          '#size' => 28,
        );
        $form['#submit'][] = '_harvest_status_user_submit';
        return $form;
      }
    break;
  }

}

/**
 * Implements hook_user_presave().
 */
function harvest_status_user_presave(&$edit, $account, $category) {
  // Make sure that our form value 'mymodule_foo' is stored as 'mymodule_bar'.
  if (isset($edit['harvest_projects']['harvest_account']) && isset($edit['harvest_projects']['harvest_account_login'])) {
    $harvest_account = harvest_request('people/' . $edit['harvest_projects']['harvest_account']);
    // we don't store the password, but the encrypted harvest login string
    $edit['data']['harvest_projects']['harvest_account_login'] =  base64_encode(trim($harvest_account['user']['email']) . ':' . trim($edit['harvest_projects']['harvest_account_login']));
  }
}

/**
 * Implements hook_block_info().
 */
function harvest_status_block_info() {
  $blocks['harvest_status'] = array(
    'info' => t('Harvest User Status'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function harvest_status_block_view($delta = '') {
  $blocks = array();
  switch ($delta) {
    case 'harvest_status':
      $block['subject'] = t('Time tracking');
      $block['content'] = harvest_status_contents();
    break;
  }
  return $block;
}

/**
 * Fetch info from the API and format
 */
function harvest_status_contents() {
  $output = '';
  foreach (variable_get('harvest_status_users', array('0')) as $uid) {
    if ($uid) {
      $user = user_load($uid);
      if ($user->data['harvest_projects']['harvest_account_login']) {
        $items = array();
        $harvest_result = harvest_request('daily', array('login' => $user->data['harvest_projects']['harvest_account_login']), TRUE);
        if (is_array($harvest_result['daily']['day_entries']['day_entry'][0])) {
          foreach ($harvest_result['daily']['day_entries']['day_entry'] as $day_entry) {
            if (isset($day_entry['timer_started_at'])) { // if this is an active timer, put it on top
              array_unshift($items, theme('harvest_status_format_day_entry', array('day_entry' => $day_entry)));
            }
            else {
              $items[] = theme('harvest_status_format_day_entry', array('day_entry' => $day_entry));
            }
          }
        // array is structured differently if there's only one entry
        }
        elseif (is_array($harvest_result['daily']['day_entries']['day_entry'])) {
            $items[] = theme('harvest_status_format_day_entry', array('day_entry' => $harvest_result['daily']['day_entries']['day_entry']));
        }
        else {
          $items[] = t('Inactive');
        }
      $output .= theme_item_list(array('items' => $items, 'title' => $user->name, 'type' => 'ul', 'attributes' => array('class' => array('harvest-status-user'))));
      }
    }
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function harvest_status_theme($existing, $type, $theme, $path) {
  return array(
    'harvest_status_format_day_entry' => array(
      'variables' => array(
        'day_entry' => array(),
      ),
    ),
  );
}

/**
 * Themable day entries from Harvest API
 */
function theme_harvest_status_format_day_entry($variables) {
  $day_entry = $variables['day_entry'];
  $output = '';
  $output .= '<span class="harvest-hours' . (isset($day_entry['timer_started_at']) ? ' active' : '') . '">' . gmdate("H:i", $day_entry['hours'] * (60*60)) . '</span> ';
  $output .= $day_entry['task'];
  if ($day_entry['notes']) {
    $output .= '<div class="harvest-notes">' . $day_entry['notes'] . '</div>';
  }
  $output .= '<div class="harvest-project">' . $day_entry['client'] . ' - ';
  $output .= $day_entry['project'] . '</div> ';
  return '<div class="day-entry">' . $output . '</div>';
}